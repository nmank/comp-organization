pointers:
	char *xp;
	*xp = 123;

	* means follow the pointer and change the value it is pointing at to 123.

	struct foo s;
	struct foo *sp;
	sp = &s; //what's the address in memory of this thing?
	s.field = 1.2;
	sp ->field = 1.7;
	(*sp).field = 1.7; //the same as ->

	float *fp = (float *) malloc( sizeof (float));
	*fp = 1.73;
	int *ip = (*int) fp;
	int i = *ip;

	what is i pointing to?
		the bit representation of the float 1.73

	(*(unsigned int *) (p))


void pointer is the return type of malloc:
	what is a void pointer?

char* cp;
	why char*?
	char is one byte.  cp-4 gives us the address 4 less than c;

NESTED POINTERS:
	int j = 7;
	int i = 4;
	in *ip = &i; //ip is assigned the address of i
	int **ipp = &ip; //store ip's address in ipp
	**ipp = 42; //same thing as saying i = 42

	*ipp = &j; //same as 9 = &j

	we need the double star in ipp's declaring because its a a pointer to a pointer to an int




POINTERS TO NULL:
	NULL is literally zero!
	the variable of any pointer type can have the value of zero;


PADDING:
	malloc is supposed to round up to the closest multiple of 8 (word size)
	wasted bytes are the "padding"


mem_stark_sbrk is the beginning our our "heap"
mem_brk is the end of the allocated area


explicit free lists have a global variable that points to the first free block and each free block has a pointer to the next free block


ERRORS:

printf("IN REALLOC\n");
    void *oldptr = ptr;
    void *newptr;
    size_t copySize;
    
    /* if some bozo passes in a null pointer or 0 for size*/
    if (oldptr == NULL || size == 0)
        //printf("something weird");
        return NULL;

    /* If there is enough room in the current block then just use that one */
    if (size <= GET_SIZE(ptr))
    {
        printf("used old pointer %i \n", (int)(oldptr));
        return ptr;
    }

    /* We are requesting more memory than is already in the block */
    else 
    {
        //copySize = GET_SIZE(oldptr);
        copySize = *(size_t *)((char *)oldptr - SIZE_T_SIZE);
        newptr = mm_malloc(size);
        printf("input size %i \n", size);
        printf("copy size %i \n", copySize);
        printf("%i \n", (int)(oldptr));
        printf("new ptr %i \n", (int)(newptr));
        if (copySize > size)
        {
            memcpy(oldptr, newptr, size);
            return newptr;
        }   
        memcpy(oldptr, newptr, copySize);
        mm_free(oldptr);
        return newptr;
    }



    if (MIN(GET_SIZE(HDRP(oldptr)), size) == size)
    {
        printf("\n%i, %i, %p \n", GET_SIZE(HDRP(oldptr)), size, oldptr);
        fflush(stdout);
        return oldptr;
    }